# there-is-no-she-bang
#
# github-tools: utility scripts for using github
#
# This shell scriplet is meant to be sourced in .bashrc or similiar startup 
# scripts.
#
# requirements:
# 
#   (1) any POSIX compliant shell
#   (2) curl
#   (3) POSIX compliant awk
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Tom Nussbaumer <thomas.nussbaumer@gmx.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

export GHTOOLS_VERSION="1.1.0 (beta)"
export GHTOOLS_DEBUG=

gh_help () {
  cat << END-OF-USAGE-TEXT
USAGE: ght command [params]

commands:

help                   ... displays this page
version                ... displays version info
clone <repo> [user-id] ... clones a repository 
info  [user-id]        ... returns account informations in json format 
repos [user-id]        ... returns list of repository names 
repos-urls [user-id]   ... returns list of repository urls
repos-json [user-id]   ... returns repos informations in json format
backup [user-id]       ... loop through all repos of a user account and either
                           clones them or uses 'git pull' to update them.
debug [on]             ... enables/disables debug (without parameter == off]

If you omit the optional parameter user-id, the name of the active working 
directory will be used as github user-id.
END-OF-USAGE-TEXT
}

__gh_debug () {
  [ -n "$GHTOOLS_DEBUG" ] && printf '[DEBUG] %s\n' "$*" 1>&2
}

__gh_error () {
  printf '[ERROR] %s\n' "$*" 1>&2
}

__gh_info () {
  printf '[INFO] %s\n' "$*"
}

__gh_warn () {
  printf '[WARNING] %s\n' "$*" 1>&2
}

__gh_rm_path () {
  echo "$*" | sed 's/.*\/\(.*\)$/\1/g'
}

__gh_local_dir () {
  __gh_rm_path $(pwd)
} 

## that one is a bitch ...
__gh_url_encode() {
  export LANG=C  
  __gh_debug "encoding [$*]"
  echo "$@" | awk '
    BEGIN {
    # We assume an awk implementation that is just plain dumb.
    # We will convert an character to its ASCII value with the
    # table ord[], and produce two-digit hexadecimal output
    # without the printf("%02X") feature.

    EOL = "%0A"     # "end of line" string (encoded)
    split ("1 2 3 4 5 6 7 8 9 A B C D E F", hextab, " ")
    hextab [0] = 0
    for ( i=1; i<=255; ++i ) ord [ sprintf ("%c", i) "" ] = i + 0
    EncodeEOL = 0; # no end-of-line encoding for now
    }
    {
    encoded = ""
    for ( i=1; i<=length ($0); ++i ) {
        c = substr ($0, i, 1)
        if ( c ~ /[a-zA-Z0-9.-]/ ) {
        encoded = encoded c     # safe character
        } else if ( c == " " ) {
        encoded = encoded "+"   # special handling
        } else {
        # unsafe character, encode it as a two-digit hex-number
        lo = ord [c] % 16
        hi = int (ord [c] / 16);
        encoded = encoded "%" hextab [hi] hextab [lo]
        }
    }
    if ( EncodeEOL ) {
        printf ("%s", encoded EOL)
    } else {
        print encoded
    }
    }
    END {
        #if ( EncodeEOL ) print ""
    }
  '
}

gh_clone () {
  [ $# -ne 1 ] && echo "USAGE: $0 repository" && return 1
  local url="git@github.com:$(__gh_url_encode $(__gh_local_dir))/$(__gh_url_encode ${1}).git"
  __gh_debug "rest-url: [$url]"
  git clone $url
}

__gh_param_or_dir () {
  local userid;
  if [ -z "$1" ]; then
     __gh_local_dir
  else
     echo "$*"
  fi
}

__gh_fetch_and_check () {
  __gh_debug "rest-url: [$*]"
  local json;
  json=$(curl -s "$*")
  local ret=$?
  [ $ret -ne 0 ] && return $ret
  [ -n "$(echo \"$json\" | grep 'Not Found')" ] && return 1 || echo "$json"
}


gh_info_json () {
  local userid=$(__gh_param_or_dir "$*")
  __gh_fetch_and_check "https://api.github.com/users/$(__gh_url_encode ${userid})"
  local ret=$?
  [ $ret -ne 0 ] && __gh_error "fetching data for user [${userid}] failed" && return $ret || return 0
}

gh_repos_json () {
  local userid=$(__gh_param_or_dir "$*")
  __gh_fetch_and_check "https://api.github.com/users/$(__gh_url_encode ${userid})/repos"
  local ret=$?
  [ $ret -ne 0 ] && __gh_error "fetching repos for user [${userid}] failed" && return $ret || return 0
}

gh_repos_urls () {
  ###############################################################
  ## NOTE: local json=$(...) would destroy the content of $? !!!
  ###############################################################
  local json
  json=$(gh_repos_json "$*")
  local ret=$?
  [ $ret -ne 0 ] && return $ret
  echo "$json" | grep "ssh_url" |  awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g'
}

gh_repos () {
  local urls
  urls=$(gh_repos_urls "$*")
  local ret=$?
  [ $ret -ne 0 ] && return $ret
  echo "$urls" | sed -e 's/.*\/\(.*\)\.git$/\1/g'
}

gh_backup () {
  local urllist
  urllist=$(gh_repos_urls "$*")
  local ret=$?
  [ $ret -ne 0 ] && return $ret

  local cnt_repo=0
  local cnt_clone=0
  local cnt_clone_err=0
  local cnt_pull=0
  local cnt_pull_err=0
  local repo_url
  local repo

  for repo_url in $urllist; do
    repo=$(echo $repo_url | sed -e 's/^.*\///' -e 's/\.git$//')
    __gh_info "processing [$repo]"
    cnt_repo=$(expr $cnt_repo + 1)
    if [ -d "$repo" ]; then
      __gh_info "using 'git pull'"
      cd $repo
      git pull -q
      if [ $? -ne 0 ]; then
        __gh_warn "failed to pull repo [$repo]"
        cnt_pull_err=$(expr $cnt_pull_err + 1)
      else
        cnt_pull=$(expr $cnt_pull + 1)
      fi
      cd ..
    else
      __gh_info "using 'git clone' with url [$repo_url]"
      git clone -q $repo_url

      if [ $? -ne 0 ]; then
        __gh_warn "failed to clone repo [$repo]"
        cnt_clone_err=$(expr $cnt_clone_err + 1)
      else
        cnt_clone=$(expr $cnt_clone + 1)
      fi
    fi
  done

  __gh_info "total: $cnt_repo pulled: $cnt_pull err_pulled: $cnt_pull_err cloned: $cnt_clone err_cloned: $cnt_clone_err"

  if [ $cnt_clone_err -ne 0 ] || [ $cnt_pull_err -ne 0 ]; then
    __gh_warn "some repositories couldn't be cloned or pulled"
    return 1
  else
    return 0
  fi
}

# TODO: idea 
#
# integrate the github markdown tools for transforming markdown to html
# and then serve it via netcat once ...
#
# { echo -ne "HTTP/1.0 200 OK\r\nContent-Length: $(wc -c <some.file)\r\n\r\n"; cat some.file; } | nc -l -p 8080

ght () {  
  case "$1" in
    "version")    echo "Github Tools - v$GHTOOLS_VERSION - Copyright (c) 2015 Tom Nussbaumer <thomas.nussbaumer@gmx.net>";;
    "help")       gh_help;;
    "clone")      shift; gh_clone      "$@";;
    "info")       shift; gh_info_json  "$@";;
    "repos")      shift; gh_repos      "$@";;
    "repos-urls") shift; gh_repos_urls "$@";;
    "repos-json") shift; gh_repos_json "$@";;
    "backup")     shift; gh_backup     "$@";;
    "debug")      GHTOOLS_DEBUG="$2"
                  [ -z "$GHTOOLS_DEBUG" ] && __gh_info "debug=off" || __gh_info "debug=on";;
    *)            gh_help;;
  esac
}

